AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Training Stats API Gateway

Parameters:
  SecretName:
    Type: String
    Default: strava_creds
    
Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: Training Stats API Gateway
      EndpointConfiguration:
        Types:
          - EDGE
      Name: training-stats-integration-api

  ApiGatewayStravaHandlerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'strava'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewaySubscriptionHandlerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StravaSubscriptionHandlerFunction.Arn}/invocations'
      OperationName: 'subscription_handler'
      ResourceId: !Ref ApiGatewayStravaHandlerResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStravaWebhooktoDynamoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST       
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        Credentials: !GetAtt ApiGatewayToWebhookDynamoDBTableRole.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: |
            { 
                "TableName": "Strava-Webhook",
                    "Item": {
                        "object_id": {
                            "N": "$input.json('$.object_id')"
                            },
                        "event_time": {
                            "N": "$input.json('$.event_time')"
                            },
                        "aspect_type": {
                            "S": $input.json('$.aspect_type')
                        }  
                    }
            }
        IntegrationResponses:
          - StatusCode: '200'  
      ResourceId: !Ref ApiGatewayStravaHandlerResource
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Training Stats API Gateway Stage V1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v1'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayStravaWebhooktoDynamoMethod
    Properties:
      Description: Training Stats API Gateway Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                - !GetAtt StravaSubscriptionHandlerFunction.Arn
                #- !GetAtt StravaActivityGrabberFunction.Arn

  StravaSubscriptionHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/strava_setup/
      Description: Strava Webhook Setup Lambda function
      FunctionName: 'strava_sub_manager'
      Handler: main.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaStravaSubHandlerRole.Arn
      Runtime: python3.8
      Timeout: 60

  TriggerStravaSetup:
    Type: Custom::TriggerStravaSetup
    Properties:
      ServiceToken: !GetAtt StravaSubscriptionHandlerFunction.Arn
      CallBack_Url: !Ref ApiGatewayStage
      Secret_Name: !Ref SecretName

  LambdaStravaSubHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: '/'

  # StravaActivityGrabberFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: src/strava_activity_grabber/strava_activity_grabber.py
  #     Description: Strava Activity Grabber function
  #     FunctionName: 'strava_activity_grabber'
  #     Handler: strava_activity_grabber.lambda_handler
  #     MemorySize: 256
  #     Role: !GetAtt LambdaStravaActivityGrabberRole.Arn
  #     Runtime: python3.8
  #     Timeout: 60

  # LambdaStravaActivityGrabberRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: 'Allow'
  #           Principal:
  #             Service:
  #               - 'lambda.amazonaws.com'
  #           Action:
  #             - 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Path: '/'

  ApiGatewayToWebhookDynamoDBTableRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: '/'

  ApiGatewayToWebhookDynamoDBTablePolicy:     
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: APIGW-TO-WEBHOOK-DYNAMO
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'dynamodb:PutItem'
            Resource: !GetAtt StravaWebhookDynamoDBTable.Arn
      Roles:
        - !Ref ApiGatewayToWebhookDynamoDBTableRole

  StravaWebhookDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "Strava-Webhook"
      AttributeDefinitions: 
        - 
          AttributeName: "object_id"
          AttributeType: "N"
        - 
          AttributeName: "event_time"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "object_id"
          KeyType: "HASH"
        - 
          AttributeName: "event_time"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1